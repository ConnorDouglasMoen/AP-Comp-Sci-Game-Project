import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.awt.*;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

public class GameFrame extends JPanel implements ActionListener{

	Timer mainTimer;
	//timer so the game continues to update as you play
	Player player;
	Player2 player2;
	static ArrayList<Enemy> enemies = new ArrayList<Enemy>();
	//Array list for red enemies
	static ArrayList<GreenEnemy> greenEnemies = new ArrayList<GreenEnemy>();
	//Array list for green enemies
	Random r = new Random();
	int enemyCount=5, greenEnemyCount=2;
	//Sets count for each of the enemies to start
	static int level=1;
	
	public GameFrame(){
		setFocusable(true);
		mainTimer = new Timer(10, this);
		mainTimer.start();
		player = new Player(230, 530);
		//player2 = new Player2(200, 530);
		//addKeyListener(new KeyAdapt(player2));
		addKeyListener(new KeyAdapt(player));
		//Starts timer and places player in starting location
		
		startGame();
	}
	
	public void paint(Graphics g) {
		
		super.paint(g);
		Graphics2D g2d= (Graphics2D) g;
		
		player.draw(g2d);
		//player2.draw(g2d);
		//Draws player
		for (int i=0; i<enemies.size(); i++){
			Enemy tempEnemy = enemies.get(i);
			tempEnemy.draw(g2d);
			//Adds red square enemies
		}
		for (int i=0; i<greenEnemies.size(); i++){
			Enemy tempGreenEnemy = greenEnemies.get(i);
			tempGreenEnemy.draw(g2d);
			//Adds green square enemies
		}

		Enemy e = new Enemy(enemyCount, enemyCount);
		GreenEnemy Ge = new GreenEnemy(greenEnemyCount, greenEnemyCount);
		//g2d.draw(e.getBounderies());
		//Draws bottom boundary so enemies are deleted as the go off screen
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		player.update();
		//player2.update();
		for (int i=0; i< enemies.size(); i++){
			Enemy tempEnemy = enemies.get(i);
			tempEnemy.update();
			//updates the location of the enemies is the array list
		}
		for (int i=0; i< greenEnemies.size(); i++){
			Enemy tempGreenEnemy = greenEnemies.get(i);
			tempGreenEnemy.update();
			//updates the location of the enemies is the array list
		}
		checkEnd();
		repaint();
	}
	
	public void addEnemy(Enemy e){
		//adds a red enemy to the array list
		enemies.add(e);
	}
	
	public void addGreenEnemy(GreenEnemy Ge){
		//adds green enemy to the array list
		greenEnemies.add(Ge);
	}
	
	public static ArrayList<Enemy> getEnemyList(){
		//adds a green enemy to its array list
		return enemies;
	}
	
	public static ArrayList<GreenEnemy> getGreenEnemyList(){
		return greenEnemies;
	}
	
	public void startGame(){
		enemyCount=level*5;
		for (int i=0; i<enemyCount; i++){
			addEnemy(new Enemy(r.nextInt(475), -10 + -r.nextInt(600+level*25)));
		}
		for (int i=0; i<greenEnemyCount; i++){
			addGreenEnemy(new GreenEnemy(r.nextInt(475), -10 + -r.nextInt(600+level*25)-800));
		}
		Player.powerUpX=r.nextInt(475);
		//Starts the game sets the enemy count and randomly places the enemies
	}//End of start game
	
	public void checkEnd(){
		if (enemies.size() ==0){
			Random r = new Random();
			level++;
			greenEnemyCount+=2;
			enemies.clear();
			resetGame();
			//JOptionPane.showMessageDialog(null, "On to level "+level);
			startGame();
			//Checks to see if all enemies have gone off the screen increases level and displays message if true
		}
		
		
	}//End of check end
	
	public void gameOver() throws IOException{
		System.out.println("You made it to level "+GameFrame.level);
		System.out.println("GAME OVER");
		//Add a new highscore if needed
				HighScore hs = new HighScore();
				hs.addScore(Main.Score);
				hs.Bubble();
				hs.UpdateFiles();
		System.exit(0);
		//Runs if you run out of health
	}
	
	public void resetGame(){
		
		Player.speed=2;
		Player.powerUp=true;
		Player.powerUpSpeed=-5;
		Player.hasPowerUp=false;
		Player.ringo=false;
		Player.shipVisable=true;
		Enemy.speed=2;
		GreenEnemy.speed=5;
		//Player2.speed=2;
		//Player2.powerUp=true;
		//Player2.powerUpSpeed=-5;
		//Player2.hasPowerUp=false;
		//Player2.ringo=false;
		//Player2.shipVisable=true;
	}
}
