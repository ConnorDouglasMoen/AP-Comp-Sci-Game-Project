import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.ImageIcon;

public class Player2 extends Player{

	public Player2(int x, int y) {
		super(x, y);
		// TODO Auto-generated constructor stub
	}
	public void keyPressed(KeyEvent e){
		int key=e.getKeyCode();
		
		if (!ringo){
			if(key == KeyEvent.VK_W){
				velY=-speed;
				//moves player up if up key is pressed
			}
		
			else if(key == KeyEvent.VK_S){
				velY=speed;
				//moves player down if down key is pressed
			}
		
			else if(key == KeyEvent.VK_A){
				velX=-speed;
				//moves player left if left key is pressed
			}
		
			else if(key == KeyEvent.VK_D){
				velX=speed;
				//moves player right if right key is pressed
			}
		}
		else if(ringo){
			if(key == KeyEvent.VK_S){
				velY=-speed;
				//moves player up if up key is pressed
			}
		
			else if(key == KeyEvent.VK_W){
				velY=speed;
				//moves player down if down key is pressed
			}
		
			else if(key == KeyEvent.VK_D){
				velX=-speed;
				//moves player left if left key is pressed
			}
		
			else if(key == KeyEvent.VK_A){
				velX=speed;
				//moves player right if right key is pressed
			}
		}
	}
	
	public void keyReleased(KeyEvent e){
		int key=e.getKeyCode();
		
		
			if(key == KeyEvent.VK_W){
				velY=0;
				//Stops player from moving when key is released
			}

			else if(key == KeyEvent.VK_A){
				velX=0;
				//Stops player from moving when key is released
			}

			else if(key == KeyEvent.VK_S){
				velY=0;
				//Stops player from moving when key is released
			}

			else if(key == KeyEvent.VK_D){
				velX=0;
				//Stops player from moving when key is released
			}
		
	
		
	}//End of keyReleased
	
		
		static boolean powerUp=true, hasPowerUp=false, ringo=false, shipVisable=true;
		static int velX=0, velY=0, powerUpSpeed=0, powerUpX=0;
		static int speed=2, pickPower=-1;
		static int lives=75;
			//sets the velocity and speed and lives to their starting values
		
		public void update(){
			y += velY;
			x += velX;
			powerUpSpeed += 2;
			checkCollisions();
			checkOffScreen();
			if (powerUp){
			checkPower();
			}
			//updates the location of the player based on what key you pressed
		}
		
		public void draw(Graphics2D g2d){
			if(shipVisable)
			g2d.drawImage(getPlayerImg(),  x,  y,  null);
			//draws player
			//g2d.setColor(Color.green);
			//if(shipVisable)
			//g2d.draw(getBounds());
			g2d.setColor(Color.BLACK);
			if(powerUp){
			g2d.setColor(Color.BLUE);
			g2d.draw(powerBounds());
			}
			g2d.setColor(Color.BLUE);
			g2d.drawString("Player 2", 345, 57);
			g2d.setColor(Color.black);
			g2d.drawRect(399, 44, 76, 16);
			g2d.drawString("Level "+GameFrame.level, 220, 25);
			//Above draws the level on the top middle of the screen
			if(lives>45){
			g2d.setColor(Color.GREEN);
			//Sets health bar color to green if it has high health
			}
			else if(lives>25){
				g2d.setColor(Color.YELLOW);
				//Sets health bar color to yellow if there is less than 45 health
			}
			else{
				g2d.setColor(Color.red);
				//sets health bar color to red if health is equal to 26
			}
			
			g2d.fillRect(400, 45, lives, 15);
			//Draws the health bar with the correct color based on health left
			g2d.setColor(Color.black);
			g2d.drawString(String.valueOf(Main.Score), 15, 25);
			g2d.draw(offRight());
			g2d.draw(offBottom());
			g2d.draw(offLeft());
			g2d.setColor(Color.red);
			g2d.draw(DEATHRIGHT());
			g2d.draw(DEATHLEFT());
			g2d.setColor(Color.black);
			if (hasPowerUp){
				switch (pickPower){
				
					case 0:
						g2d.drawString("SPEED UP", 100, 45);
					break;
					
					case 1:
						g2d.drawString("LIVES UP", 100, 45);
					break;
					
					case 2:
						g2d.drawString("LIVES DOWN", 100, 45);
					break;
					
					case 3:
						g2d.drawString("SPEED DOWN", 100, 45);
					break;
					
					case 4:
						g2d.drawString("RINGO", 100, 45);
					break;
					
					case 5:
						g2d.drawString("DUDE,", 118, 55);
						g2d.drawString("WHERE'S MY SHIP?", 92, 75);
					break;
					
					case 6:
						g2d.drawString("ENEMIES SLOW", 100, 45);
					break;
				}
			}
		}
		
		public Image getPlayerImg(){
			
			ImageIcon ic = new ImageIcon("P:/GameImages/Ship2.png");
			return ic.getImage();
			//gets player image
		}
		
		
		public void checkCollisions(){
			ArrayList<Enemy> enemies = GameFrame.getEnemyList();
			for (int i=0; i<enemies.size(); i++){
				Enemy tempEnemy = enemies.get(i);
				if (getBounds().intersects(enemies.get(i).getBounds())){
						lives--;
						//Takes away health if you run into an enemy
						if(lives<=0){
							GameFrame GF = new GameFrame();
							try {
								GF.gameOver();
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}
				}
				
			}
			ArrayList<GreenEnemy> greenEnemies = GameFrame.getGreenEnemyList();
			for (int i=0; i<greenEnemies.size(); i++){
				Enemy tempGreenEnemy = greenEnemies.get(i);
				if (getBounds().intersects(greenEnemies.get(i).getBounds())){
						lives--;
						//Takes away health if you run into an enemy
						if(lives==0){
							System.out.println("You made it to level "+GameFrame.level);
							System.out.println("GAME OVER");
							System.exit(0);
							//Runs if you run out of health
						}
				}
				
			}
			
		}//End of check Collisions
		
		public void checkOffScreen(){
			if(getBounds().intersects(offRight())){
				velX=-speed;
				//Stops you from going of to the right
				/*lives--;
				if(lives==0){
					System.out.println("You made it to level "+GameFrame.level);
					System.out.println("GAME OVER");
					System.exit(0);
				}*/
				
			}
			else if (getBounds().intersects(offLeft())){
				velX=speed;
				//stops you from going of the screen to the left
				/*lives--;
				if(lives==0){
					System.out.println("You made it to level "+GameFrame.level);
					System.out.println("GAME OVER");
					System.exit(0);
				}*/
			}
			else if(getBounds().intersects(offBottom())){
				velY=-speed;
				//stops you from going off the bottom of the screen
			}
			else if(getBounds().intersects(DEATHRIGHT())){
				System.out.println("You are a cheater");
				GameFrame GF = new GameFrame();
				try {
					GF.gameOver();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			else if(getBounds().intersects(DEATHLEFT())){
				System.out.println("You are a cheater");
				GameFrame GF = new GameFrame();
				try {
					GF.gameOver();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			
		}
		
		public void checkPower(){
			if(getBounds().intersects(powerBounds())){
				Random r = new Random();
				pickPower=r.nextInt(7);
				//pickPower=5;
				
				switch (pickPower){
				
				case 0:
				speed=5;
				break;
				
				case 1:
				lives=75;
				break;
				
				case 2:
				lives=lives-25;
				if(lives<=0){
					GameFrame GF = new GameFrame();
					try {
						GF.gameOver();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				break;
				
				case 3:
				speed=1;
				break;
				
				case 4:
				ringo=true;
				break;
				
				case 5:
				shipVisable=false;
				break;
				
				case 6:
				Enemy.speed=1;
				GreenEnemy.speed=3;
				break;
				
				
				}//End of switch statement
				powerUp=false;
				hasPowerUp=true;
				
			}
			
			
		}//end of check power
		
		public Rectangle getBounds(){
			//return new Rectangle(x, y, getPlayerImg().getWidth(null), getPlayerImg().getHeight(null));
			//Gives boundaries of player
			return new Rectangle(x, y, 25, 25);
			
		}
		
		public Rectangle offRight(){
			return new Rectangle(490, -5, 200, 600);
			//Gets boundaries of right side of the screen
		}
		
		public Rectangle offLeft(){
			return new Rectangle(-200, -5, 195, 600);
			//Gets boundaries of left side of the screen
		}
		
		public Rectangle offBottom(){
			return new Rectangle(-5, 575, 600, 200);
			//Gets boundaries of the bottom of the screen
		}

		public Rectangle powerBounds(){
			
			return new Rectangle (powerUpX, powerUpSpeed, 25, 25);
		}
		
		public Rectangle DEATHRIGHT(){
			return new Rectangle(520, -500, 600, 1500);
		}
		
		public Rectangle DEATHLEFT(){
			return new Rectangle(-200, -500, 185, 1500);
		}
	}
