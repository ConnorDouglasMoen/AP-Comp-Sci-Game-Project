import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.ImageIcon;

public class Player extends Entity{
	
	static boolean powerUp=true;
	int velX=0, velY=0, powerUpSpeedY=0;
	static int speed=2;
	int lives=75;
		//sets the velocity and speed and lives to their starting values
	public Player(int x, int y) {
		super(x, y);
		update();
	}

	public void update(){
		y += velY;
		x += velX;
		powerUpSpeedY += 2;
		checkCollisions();
		checkOffScreen();
		if (powerUp)
		checkSpeedPower();
		//updates the location of the player based on what key you pressed
	}
	
	public void draw(Graphics2D g2d){
		g2d.drawImage(getPlayerImg(),  x,  y,  null);
		//draws player
		//g2d.draw(getBounds());
		if(powerUp){
		g2d.draw(powerBounds());
		}
		g2d.drawString("Level "+GameFrame.level, 220, 25);
		//Above draws the level on the top middle of the screen
		if(lives>45){
		g2d.setColor(Color.GREEN);
		//Sets health bar color to green if it has high health
		}
		else if(lives>25){
			g2d.setColor(Color.YELLOW);
			//Sets health bar color to yellow if there is less than 45 health
		}
		else{
			g2d.setColor(Color.red);
			//sets health bar color to red if health is equal to 26
		}
		
		g2d.fillRect(400, 20, lives, 15);
		//Draws the health bar with the correct color based on health left
		g2d.setColor(Color.black);
		g2d.drawString(String.valueOf(Main.Score), 15, 20);
	}
	
	public Image getPlayerImg(){
		
		ImageIcon ic = new ImageIcon("C:/GameImages/Ship2.png");
		return ic.getImage();
		//gets player image
	}
	
	public void keyPressed(KeyEvent e){
		int key=e.getKeyCode();
		
		if(key == KeyEvent.VK_UP){
			velY=-speed;
			//moves player up if up key is pressed
		}
		
		else if(key == KeyEvent.VK_DOWN){
			velY=speed;
			//moves player down if down key is pressed
		}
		
		else if(key == KeyEvent.VK_LEFT){
			velX=-speed;
			//moves player left if left key is pressed
		}
		
		else if(key == KeyEvent.VK_RIGHT){
			velX=speed;
			//moves player right if right key is pressed
		}
	}
	
	public void keyReleased(KeyEvent e){
		int key=e.getKeyCode();
		
		if(key == KeyEvent.VK_UP){
			velY=0;
			//Stops player from moving when key is released
		}

		else if(key == KeyEvent.VK_LEFT){
			velX=0;
			//Stops player from moving when key is released
		}

		else if(key == KeyEvent.VK_DOWN){
			velY=0;
			//Stops player from moving when key is released
		}

		else if(key == KeyEvent.VK_RIGHT){
			velX=0;
			//Stops player from moving when key is released
		}
	}//End of keyReleased
	
	public void checkCollisions(){
		ArrayList<Enemy> enemies = GameFrame.getEnemyList();
		for (int i=0; i<enemies.size(); i++){
			Enemy tempEnemy = enemies.get(i);
			if (getBounds().intersects(enemies.get(i).getBounds())){
					lives--;
					//Takes away health if you run into an enemy
					if(lives==0){
						System.out.println("You made it to level "+GameFrame.level);
						System.out.println("GAME OVER");
						System.exit(0);
						//Runs if you run out of health
					}
			}
			
		}
		ArrayList<GreenEnemy> greenEnemies = GameFrame.getGreenEnemyList();
		for (int i=0; i<greenEnemies.size(); i++){
			Enemy tempGreenEnemy = greenEnemies.get(i);
			if (getBounds().intersects(greenEnemies.get(i).getBounds())){
					lives--;
					//Takes away health if you run into an enemy
					if(lives==0){
						System.out.println("You made it to level "+GameFrame.level);
						System.out.println("GAME OVER");
						System.exit(0);
						//Runs if you run out of health
					}
			}
			
		}
		
	}//End of check Collisions
	
	public void checkOffScreen(){
		if(getBounds().intersects(offRight())){
			velX=-2;
			//Stops you from going of to the right
			/*lives--;
			if(lives==0){
				System.out.println("You made it to level "+GameFrame.level);
				System.out.println("GAME OVER");
				System.exit(0);
			}*/
			
		}
		else if (getBounds().intersects(offLeft())){
			velX=2;
			//stops you from going of the screen to the left
			/*lives--;
			if(lives==0){
				System.out.println("You made it to level "+GameFrame.level);
				System.out.println("GAME OVER");
				System.exit(0);
			}*/
		}
		else if(getBounds().intersects(offBottom())){
			velY=-2;
			//stops you from going off the bottom of the screen
		}
		
	}
	
	public void checkSpeedPower(){
		if(getBounds().intersects(powerBounds())){
			Random r = new Random();
			int pickPower=r.nextInt(3);
			
			switch (pickPower){
			
			case 0:
			speed=5;
			break;
			
			case 1:
			lives=75;
			break;
			
			case 2:
			lives=lives-25;
			break;
			
			
			}//End of switch statement
			powerUp=false;
			
		}
	}
	
	public Rectangle getBounds(){
		//return new Rectangle(x, y, getPlayerImg().getWidth(null), getPlayerImg().getHeight(null));
		//Gives boundaries of player
		return new Rectangle(x, y, 25, 25);
		
	}
	
	public Rectangle offRight(){
		return new Rectangle(490, -5, 200, 600);
		//Gets boundaries of right side of the screen
	}
	
	public Rectangle offLeft(){
		return new Rectangle(-200, -5, 195, 600);
		//Gets boundaries of left side of the screen
	}
	
	public Rectangle offBottom(){
		return new Rectangle(-5, 575, 600, 200);
		//Gets boundaries of the bottom of the screen
	}

	public Rectangle powerBounds(){
		
		return new Rectangle (300, powerUpSpeedY, 25, 25);
	}

}

